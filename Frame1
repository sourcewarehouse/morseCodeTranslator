/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package morsecodegui;

import java.awt.Color;
import java.awt.Font;
import java.util.Scanner;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Will Barroso
 */
public class Frame1 extends javax.swing.JFrame {
    JTextField jTextField1, jTextField3;
    String line;
    JLabel jLabel1, jLabel2;
    Font font1; 
    /**
     * Creates new form Frame1
     */
    public Frame1() {
        this.font1 = new Font("SansSerif", Font.PLAIN, 20);
        initComponents();
        this.setSize(400, 360);
        this.setLocationRelativeTo(null);
        
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Morse Code Translator");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setToolTipText("Enter sentence here");
        jTextField1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 350, 60));

        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 350, 130));

        jLabel1.setText("Enter sentence to be encoded and then press Enter");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 300, -1));

        jLabel2.setText("Encoded sentence");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
       jTextField3.setFont(font1);
       line = jTextField1.getText();
       
        try {
            AuxClass.checkContents(line);
        } catch (NewException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        
       String result = " ";
       char[] alphanum = {'a','b', 'c', 'd', 'e', 'f', 'g','h', 'i', 'j','k',
            'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u','v', 'w', 'x',
            'y', 'z', '1', '2', '3', '4', '5','6', '7', '8', '9', '0'};
        String[] code = {".-","-...", "-.-.", "-..", ".", "..-.", "--.",""
                + "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ""
                + ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", ""
                + "-..-", "-.--", "--..", ".----", "..---", "...--", "....-", ""
                + ".....", "-....", "--...", "---..", "----.", "-----"};
        
        line = line.toLowerCase();
        
        String[] tokens = line.split(" ");
        
        for(String token1: tokens){
            char[] charToken = token1.toCharArray();
            for(int i = 0; i < charToken.length; i++){
                int j = 0;
                while(charToken[i] != alphanum[j]){
                    j++;
                }
                result = result + code[j] + " ";
            }
            result = result  + "   ";   
        }
            jTextField3.setText(result);
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    
/*
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
*/
    }

class AuxClass {
    static char [] array;
    public static void checkContents(String line) throws NewException {
        array = line.toCharArray();
        for(int i = 0; i < array.length;) {
            if((array[i] >= 48 && array[i] <= 57) || (array[i] >= 97 && array[i] <= 122) || array[i] == 32){
                i++;
            }else
                throw new NewException();
        }
    }
}

class NewException extends NullPointerException {

    public NewException() {
        super("Error! Invalid character.");
    }

    public NewException(String customMsg) {
        super(customMsg);
    }

}
